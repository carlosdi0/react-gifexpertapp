{"version":3,"sources":["reportWebVitals.js","components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddCategory","addCategory","useState","inputValue","setInputValue","className","onSubmit","e","preventDefault","cats","some","cat","trim","type","placeholder","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","preview_gif","GifGridItem","src","alt","GifGrid","loading","state","setState","useEffect","imgs","useFetchGifs","image","GifExpertApp","categories","setCategories","ReactDOM","render","document","getElementById"],"mappings":"oLAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,qBCgCCQ,EApCK,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAAkB,EAEDC,mBAAS,IAFR,mBAE9BC,EAF8B,KAElBC,EAFkB,KAmBrC,OACI,qBAAKC,UAAU,eAAf,SACI,sBAAMC,SAbO,SAACC,GAClBA,EAAEC,iBACFP,GAAY,SAAAQ,GACR,OAAGA,EAAKC,MAAK,SAAAC,GAAG,OAAIA,IAAQR,EAAWS,UAC5B,YAAIH,GAET,CAAEN,EAAWS,QAAnB,mBAA8BH,OAElCL,EAAc,KAKV,SACI,uBACIS,KAAK,OACLC,YAAY,cACZC,MAAOZ,EACPa,SAtBU,SAACT,GACvBH,EAAcG,EAAEU,OAAOF,e,+BCRlBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAWH,GAD/C,8DAEII,MAAMF,GAFV,cAEbG,EAFa,gBAGIA,EAASC,OAHb,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,YAAYZ,QATlB,kBAaZM,GAbY,4CAAH,sDCYLO,EAVK,SAAC,GAAwB,IAAtBJ,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAE9B,OACI,qBACIhB,UAAU,8CADd,SAEI,qBAAK8B,IAAKd,EAAKe,IAAKL,KAFdD,ICqBHO,EArBC,SAAC,GAAkB,IAAhBlB,EAAe,EAAfA,SAAe,ECFN,SAACA,GAAc,IAAD,EAEZjB,mBAAS,CAC/BwB,KAAM,GACNY,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAiBtC,OAVAC,qBAAU,WACNvB,EAAQC,GAAUzB,MAAK,SAAAgD,GACnBF,EAAS,CACLd,KAAMgB,EACNJ,SAAS,SAGlB,CAACnB,IAGGoB,EDb2BI,CAAaxB,GAAjCa,EAFgB,EAEtBN,KAAcY,EAFQ,EAERA,QAEtB,OACI,qCACI,6BAAKnB,IACHmB,GAAW,yCACb,qBAAKjC,UAAU,OAAf,SACK2B,EAAOJ,KAAI,SAAAgB,GAAK,OACb,cAAC,EAAD,eAAgCA,GAAdA,EAAMd,aEQ7Be,EAlBM,WAAO,IAAD,EAEa3C,mBAAS,IAFtB,mBAEhB4C,EAFgB,KAEJC,EAFI,KAIvB,OACI,qCACI,8CACA,cAAC,EAAD,CAAa9C,YAAa8C,IACzBD,EAAWlB,KAAI,SAAAT,GAAQ,OAChB,cAAC,EAAD,CAEIA,SAAWA,GADNA,UCR7B6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1B5D,M","file":"static/js/main.b00e3e4b.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({ addCategory }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        addCategory(cats => {\r\n            if(cats.some(cat => cat === inputValue.trim())) {\r\n                return [...cats];\r\n            } \r\n            return [inputValue.trim(), ...cats];\r\n        });\r\n        setInputValue('');\r\n    }\r\n\r\n    return (\r\n        <div className=\"add-category\">\r\n            <form onSubmit={handleSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Buscar GIFs\"\r\n                    value={inputValue}\r\n                    onChange={handleInputChange} />\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    addCategory: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory;","export const getGifs = async ( category ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&api_key=RNgBxbrK8QgOSe44uDPFH4CVHa13TnOD&limit=8`; \r\n    const response = await fetch(url);\r\n    const { data } = await response.json();\r\n    \r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.preview_gif.url\r\n        }\r\n    });\r\n\r\n    return gifs;\r\n}","import React from 'react';\r\n\r\nconst GifGridItem = ({ id, title, url }) => {\r\n\r\n    return (\r\n        <div key={id}\r\n            className=\"grid-item animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GifGridItem;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport GifGridItem from './GifGridItem';\r\n\r\nconst GifGrid = ({ category }) => {\r\n\r\n    const { data: images, loading } = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h2>{category}</h2>\r\n            { loading && <p>Cargando</p> }\r\n            <div className=\"grid\">\r\n                {images.map(image => (\r\n                    <GifGridItem key={image.id} {...image} />\r\n                ))}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nGifGrid.propTypes = {\r\n    category: PropTypes.string.isRequired\r\n}\r\n\r\nexport default GifGrid\r\n","import { useEffect, useState } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n    useEffect(() => {\r\n        getGifs(category).then(imgs => {\r\n            setState({\r\n                data: imgs,\r\n                loading: false\r\n            })\r\n        });\r\n    }, [category]);\r\n\r\n\r\n    return state;\r\n}\r\n\r\n","import React, { useState } from 'react';\r\n\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState([]);\r\n\r\n    return (\r\n        <>\r\n            <h1>GifExpertApp</h1>\r\n            <AddCategory addCategory={setCategories} />\r\n            {categories.map(category => (\r\n                    <GifGrid\r\n                        key={category}\r\n                        category={ category } />\r\n                ))}\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}